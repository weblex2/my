<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Product;
use App\Models\Customer;
use App\Models\User;
use App\Models\CustomerAssd;
use App\Models\CustomerAddress;
use App\Models\FilTableFields;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;
use App\Models\FilamentConfig;
use Illuminate\Support\Facades\Redis;


class TestController extends Controller
{
    public function chatGptApi(){
        //phpinfo();
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
       $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/chat/completions');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"model\": \"gpt-3.5-turbo\", \"prompt\": \"Say this is a test\", \"temperature\": 0, \"max_tokens\": 7}");

        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER , false);
        $headers = array();
        $headers[] = 'Content-Type: application/json';

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);


        dump($result);

    }

    public function testModel(){


        $emails = Customer::all()->pluck('email', 'email')->toArray();
        dd($emails);

        $filter = FilamentConfig::getFiltersFor('customer');
        dump($filter);
        die();
        $user = User::find(1);
        dump($user);
        dump($user->user01);
        #$pw = decrypt($user->user01);
        #echo $pw;
        die();
        #$customer = Customer::find(5);
        #$customer->load('assd');
        //dump($customer);
        #dump($customer->assd->bi);
        $adminRole = Role::firstOrCreate(
            ['name' => 'admin', 'guard_name' => 'web']
        );
        $user = \App\Models\User::find(1);
        $user->assignRole('admin');
        $adminRole->givePermissionTo(Permission::all());
        echo "Done";
    }

    public function check(){

        $baseDir = __DIR__ . '/app';
        $classes = [];

        $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($baseDir));

        foreach ($rii as $file) {
            if (!$file->isFile() || $file->getExtension() !== 'php') {
                continue;
            }

            $contents = file_get_contents($file->getPathname());

            if (preg_match('/namespace\s+(.+?);/', $contents, $nsMatch) &&
                preg_match('/class\s+([a-zA-Z0-9_]+)/', $contents, $classMatch)) {

                $fqcn = $nsMatch[1] . '\\' . $classMatch[1];

                if (isset($classes[$fqcn])) {
                    echo "❗ Doppelte Klasse gefunden: {$fqcn}\n";
                    echo " - Datei 1: {$classes[$fqcn]}\n";
                    echo " - Datei 2: {$file->getPathname()}\n\n";
                } else {
                    $classes[$fqcn] = $file->getPathname();
                }
            }
        }

    }

    public function testRedis(){
        try {
        // Setze einen Schlüssel
        Redis::set('test:key', 'Hallo Redis!');

        // Lese den Schlüssel aus
        $value = Redis::get('test:key');

        return response()->json([
            'status' => 'OK',
            'message' => $value,
        ]);
    } catch (\Exception $e) {
        return response()->json([
            'status' => 'Fehler',
            'message' => $e->getMessage(),
        ], 500);
    }
    }
}
